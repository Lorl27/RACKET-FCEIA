;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname |PRACTICA EN PAPEL 5 PERO EN RACKET PORQUE SOY GUAY|) (read-case-sensitive #t) (teachpacks ((lib "universe.rkt" "teachpack" "2htdp") (lib "image.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "universe.rkt" "teachpack" "2htdp") (lib "image.rkt" "teachpack" "2htdp")) #f)))
#|

SISTEMA DE CONTRASEÑAS
En un sistema de contraseñas de acceso a un sistema operativo, cada persona cuenta con
un nombre identificador único, una contraseña de acceso y un nivel de permisos en el sistema.

Una persona puede tener permisos de administración (especiales) del sistema; o bien, tener
permisos de uso básico del sistema.

El programa que maneja las personas usuarias del sistema,
sus contraseñas y sus permisos representa el registro de cada persona mediante la siguiente
estructura:

|#

(define-struct Usr [login pass permiso] )
;Usr es (String, String, Number)
;Un elemento Usr representa el registro de una persona con acceso al sistema operativo donde
;login: es el nombre identificador de la persona,
;pass: es la contraseña de acceso,
;permiso: es el identificador de los permisos en el sistema que tiene la persona (ADMIN/USRPERMISO)

; Si tiene permiso de administración, el valor es 0; en otro caso es 1.
;----------------------------------------------------------------------
; 0 es el identificador de permisos de administración del sistema
(define ADMIN 0)
;1 es el identificador de permisos de uso básico del sistema
(define USRPERMISO 1)
;---------------------------------------------------------------
;Constantes que pueden ser usadas para casos de prueba.
(define ANA (make-Usr "ana" "12345678" ADMIN))
(define LUIS (make-Usr "luis" "12345678" USRPERMISO))
(define MARTA (make-Usr "marta" "R34dlsoA" ADMIN))
(define L1 (list ANA LUIS))
(define L2 (list ANA LUIS MARTA))
;"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


;Ejercicio 1. Complete el siguiente diseño dando la definición de la función cambioClave.

;cambioClave: Usr String ->Usr
;Esta función recibe el registro de una persona usuaria del sistema y una contraseña.
;Si la contraseña recibida es diferente a la que tiene el registro y tiene 8 o más caracteres,
;la función cambia la contraseña en el registro y lo devuelve;
; en caso contrario, devuelve el registro sin modificaciones.
(check-expect (cambioClave ANA "aaa") ANA)
(check-expect (cambioClave ANA "12345678") ANA)
(check-expect (cambioClave ANA "abcdefghi") (make-Usr "ana""abcdefghi" ADMIN))

(define (cambioClave usuario contra-nueva) (if (and
                                                (not(string=? (Usr-pass usuario) contra-nueva))
                                                (>= (string-length contra-nueva) 8) )
                                               (make-Usr (Usr-login usuario) contra-nueva (Usr-permiso usuario))
                                               usuario ) )
;--------------------------------------------------------------------------------------------
;Ejercicio 2. Complete el siguiente diseño dando la definición de la función agregaUsr.
;!!!!!!No defina funciones auxiliares ni use funciones del lenguaje como member?.


;agregaUsr: String String Number List(Usr) ->List(Usr)
;Esta función agrega un nuevo registro de una persona con acceso al sistema.
;Para esto recibe un nombre identificador de la persona, una contraseña de acceso, un identificador de permisos y
;la lista de registros de personas con acceso al sistema.
;Si no existe un registro con el identificador recibido, agrega uno nuevo a la lista, con la correspondiente información, y la devuelve;
; en caso contrario, no lo agrega y devuelve la lista original.
(check-expect (agregarUsr "marta" "R34dlsoA" ADMIN L1) L2)
(check-expect (agregarUsr "luis" "R34dlsoA" ADMIN L1) L1)
(check-expect (agregarUsr "marta" "R34dlsoA" ADMIN empty) (list MARTA))

(define (contiene? str lista) (cond [ (empty? lista) #f ]
                                    [ (cons? lista) (if (string=? str (first lista) ) #t (contiene? str (rest lista) ) ) ]
                              )
)

(define (agregarUsr nombre contra permiso listaUsu) (if ( string=? (Usr-login (first(listaUsu)))
                                                        nombre)
                                                       listaUsu
                                                       ( cons listaUsu nombre ) ) 
 )

